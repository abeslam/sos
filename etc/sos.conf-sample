[sos]
# comma separated list of hostname used for Origin Management.
# If incoming request's Host matches then request is routed to SOS management.
origin_db_hosts = origin_db.com
# comma separated list of hostname suffixes used for CDN origin server.
# If incoming request's Host endswith the host suffix then request is
# routed to SOS cdn origin server.
origin_cdn_host_suffixes = origin_cdn.com
origin_admin_key = password
# random unique string that can never change (DO NOT LOSE)
hash_path_suffix = sos_suffix
#origin_account = .origin
#origin_prefix = /origin/
#default_ttl = 259200
#min_ttl = 900
#max_ttl = 3155692600
#max_cdn_file_size = 10737418240
#number_dns_shards = 100
# Enable DELETE method
#delete_enabled = true
#log_access_requests = true
# number of .hash containers used to keep track of cdn hashes. This
# will split the cdn hashes between many containers to distribute the load.
# This number CAN NEVER CHANGE after initial prep.
#number_hash_id_containers = 100
# Adding the following will add an extra hash to the "hash" part of the
# outgoing url in the form token-hash where token is the first 30 characters
# of the hmac-sha1 of the hostname of the url. The hmac will be evaluated with
# secret given. We only take the first 30 chars because of the 63 char limit
# to hostname labels. This is optional. DO NOT LOSE this secret.
# hmac_signed_url_secret = somesecretkey
# only keep the first 30 chars of hash to keep label size <= 63
# hmac_token_length = 30
# comma separated list of ip addresses allowed into origin server, by default
# is not set which allows in all ips. Will be checked against REMOTE_ADDR
# allowed_origin_remote_ips =
#
# set this to blank if you do not want to force an extra header to delete
# the cdn container
# extra_header_for_deletes = x-remove-cdn-container

[incoming_url_regex]
# These regular expressions will be used to parse to cdn request urls to get
# the hash and obj_name- all that is needed to get an object.  Be sure that
# all outgoing url formats below are matched by one of the regexes (not
# including the object_name of course).
# The keys are not used- they just need to be unique
regex_0 = ^http:\/\/(?P<hash>[\-\w]+)\.r\d+\.origin_cdn\.com[^\/]*\/?(?P<object_name>(.+))?$
regex_1 = ^https:\/\/(?P<hash>[\-\w]+)\.ssl.origin_cdn\.com[^\/]*\/?(?P<object_name>(.+))?$

# The format of the data returned from HEAD and GET requests to the origin
# server is highly configurable.
# The bare minimum (and recommended way) is that you only specify
# [outgoing_url_format].  That way all requests will return with the same data
# keys and output formats. Within the url sections you can specify %(hash)s
# and %(hash_mod)s that will be overridden with the correct hash and hash_mod
# for the given request.  The hash will be a md5 hex string and hash_mod will
# be the decimal modula of the last 2 characters of that string.  For example:
# hash d41d8cd98f00b204e9800998ecf8427e would have hash_mod 126 (the decimal
# of 7e).
# Here are the possible sections:
[outgoing_url_format]
# This is the catch-all for outgoing requests.  This will be used if nothing
# more specific matches
X-CDN-URI = http://%(hash)s.r%(hash_mod)d.origin_cdn.com
X-CDN-SSL-URI = https://%(hash)s.ssl.origin_cdn.com
#X-CDN-MYSERVICE-URI = http://%(hash)s.r%(hash_mod)d.mine.origin_cdn.com

# for more specific control you can set one or more of the following:
[outgoing_url_format_head]
# Used as the format for HEADs, PUTs, and POSTs- where the data is listed in
# request as header info
[outgoing_url_format_get]
# Used as the format for GET requests unless xml or json is specified also
[outgoing_url_format_get_xml]
# Used for GET listings in XML
[outgoing_url_format_get_json]
# Used for GET listings in JSON
